/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,13],$V1=[5,15],$V2=[1,20],$V3=[1,35],$V4=[1,39],$V5=[1,41],$V6=[1,42],$V7=[1,43],$V8=[1,44],$V9=[1,55],$Va=[1,70],$Vb=[1,124],$Vc=[1,191],$Vd=[1,198],$Ve=[1,229],$Vf=[1,233];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"S":3,"Instrucciones":4,"EOF":5,"Instruccion":6,"LOGIN":7,"LOGOUT":8,"QUERY":9,"DATA":10,"MESSAGE":11,"ERROR":12,"STRUC":13,"DATABASES":14,"CORIZQ":15,"MAS":16,"RLOGIN":17,"CORDER":18,"USER":19,"PASSWORD":20,"MENOS":21,"RESPUESTA":22,"RUSER":23,"VALOR":24,"RPASS":25,"CADENA":26,"IDENTIFICADOR":27,"ENTERO":28,"DECIMAL":29,"RSUCCESS":30,"RFAIL":31,"RLOGOUT":32,"RQUERY":33,"RDATA":34,"RMESSAGE":35,"RERROR":36,"LINEA":37,"COLUMNA":38,"TIPO":39,"DESCRIPCION":40,"RLINE":41,"RCOLUMN":42,"RTYPE":43,"RDESC":44,"RSTRUC":45,"RDATABASES":46,"DATABASES2":47,"DATABASE":48,"RDATABASE":49,"NAME":50,"TABLES":51,"TYPES":52,"PROCEDURES":53,"RNAME":54,"RTABLES":55,"TABLES2":56,"TABLE":57,"RTABLE":58,"COLUMNS":59,"COLUMN":60,"RCOLUMNS":61,"RTYPES":62,"TYPES2":63,"TYPE":64,"ATTRIBUTES":65,"ATTRIBUTE":66,"RATTRIBUTES":67,"RPROCEDURES":68,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",15:"CORIZQ",16:"MAS",17:"RLOGIN",18:"CORDER",21:"MENOS",23:"RUSER",25:"RPASS",26:"CADENA",27:"IDENTIFICADOR",28:"ENTERO",29:"DECIMAL",30:"RSUCCESS",31:"RFAIL",32:"RLOGOUT",33:"RQUERY",34:"RDATA",35:"RMESSAGE",36:"RERROR",41:"RLINE",42:"RCOLUMN",43:"RTYPE",44:"RDESC",45:"RSTRUC",46:"RDATABASES",49:"RDATABASE",54:"RNAME",55:"RTABLES",58:"RTABLE",61:"RCOLUMNS",62:"RTYPES",67:"RATTRIBUTES",68:"RPROCEDURES"},
productions_: [0,[3,2],[4,2],[4,1],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[7,10],[7,9],[19,9],[20,9],[24,1],[24,1],[24,1],[24,1],[22,3],[22,3],[8,9],[8,9],[9,10],[10,9],[11,9],[12,12],[37,9],[38,9],[39,9],[40,9],[13,9],[14,9],[47,2],[47,1],[48,12],[50,9],[51,9],[56,2],[56,1],[57,10],[57,9],[59,2],[59,1],[60,9],[52,9],[63,2],[63,1],[64,10],[64,9],[65,2],[65,1],[66,9],[53,9]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
}
},
table: [{2:[1,4],3:1,4:2,6:3,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0},{1:[3]},{5:[1,14],6:15,7:5,8:6,9:7,10:8,11:9,12:10,13:11,14:12,15:$V0},o($V1,[2,3]),o($V1,[2,4]),o($V1,[2,5]),o($V1,[2,6]),o($V1,[2,7]),o($V1,[2,8]),o($V1,[2,9]),o($V1,[2,10]),o($V1,[2,11]),o($V1,[2,12]),{16:[1,16]},{1:[2,1]},o($V1,[2,2]),{17:[1,17],32:[1,18],33:[1,19],34:$V2,35:[1,21],36:[1,22],45:[1,23],46:[1,24]},{18:[1,25]},{18:[1,26]},{18:[1,27]},{18:[1,28]},{18:[1,29]},{18:[1,30]},{18:[1,31]},{18:[1,32]},{15:$V3,19:33,22:34},{15:$V3,19:37,22:36},{15:$V4,19:38},{24:40,26:$V5,27:$V6,28:$V7,29:$V8},{24:45,26:$V5,27:$V6,28:$V7,29:$V8},{15:[1,47],37:46},{15:$V4,19:48},{15:[1,51],47:49,48:50},{15:[1,53],20:52},{15:[1,54]},{16:$V9,30:[1,56],31:[1,57]},{15:[1,58]},{15:[1,59]},{10:60,15:[1,61]},{16:$V9},{15:[1,62]},{15:[2,17]},{15:[2,18]},{15:[2,19]},{15:[2,20]},{15:[1,63]},{15:[1,65],38:64},{16:[1,66]},{15:[1,67]},{15:[1,68],48:69},{15:[2,36]},{16:$Va},{15:[1,71]},{16:[1,72]},{21:[1,73]},{23:[1,74]},{18:[1,75]},{18:[1,76]},{21:[1,77]},{21:[1,78]},{15:[1,79]},{16:[1,80]},{21:[1,81]},{21:[1,82]},{15:[1,84],39:83},{16:[1,85]},{41:[1,86]},{21:[1,87]},{16:$Va,21:[1,88]},{15:[2,35]},{49:[1,89]},{21:[1,90]},{25:[1,91]},{17:[1,92]},{18:[1,93]},{15:[2,21]},{15:[2,22]},{32:[1,94]},{32:[1,95]},{21:[1,96]},{34:$V2},{34:[1,97]},{35:[1,98]},{15:[1,100],40:99},{16:[1,101]},{42:[1,102]},{18:[1,103]},{45:[1,104]},{46:[1,105]},{18:[1,106]},{17:[1,107]},{18:[1,108]},{18:[1,109]},{24:110,26:$V5,27:$V6,28:$V7,29:$V8},{18:[1,111]},{18:[1,112]},{33:[1,113]},{18:[1,114]},{18:[1,115]},{15:[1,116]},{16:[1,117]},{43:[1,118]},{18:[1,119]},{24:120,26:$V5,27:$V6,28:$V7,29:$V8},{18:[1,121]},{18:[1,122]},{15:$Vb,50:123},{18:[1,125]},{24:126,26:$V5,27:$V6,28:$V7,29:$V8},o($V1,[2,14]),{15:[1,127]},o($V1,[2,23]),o($V1,[2,24]),{18:[1,128]},o($V1,[2,26]),o($V1,[2,27]),{21:[1,129]},{44:[1,130]},{18:[1,131]},{24:132,26:$V5,27:$V6,28:$V7,29:$V8},{15:[1,133]},o($V1,[2,33]),o($V1,[2,34]),{15:[1,135],51:134},{16:[1,136]},o($V1,[2,13]),{15:[1,137]},{21:[1,138]},o($V1,[2,25]),{36:[1,139]},{18:[1,140]},{24:141,26:$V5,27:$V6,28:$V7,29:$V8},{15:[1,142]},{21:[1,143]},{15:[1,145],52:144},{16:[1,146]},{54:[1,147]},{21:[1,148]},{23:[1,149]},{18:[1,150]},{24:151,26:$V5,27:$V6,28:$V7,29:$V8},{15:[1,152]},{21:[1,153]},{41:[1,154]},{15:[1,156],53:155},{16:[1,157]},{55:[1,158]},{18:[1,159]},{25:[1,160]},{18:[1,161]},o($V1,[2,28]),{15:[1,162]},{21:[1,163]},{42:[1,164]},{18:[1,165]},{15:[1,166]},{16:[1,167]},{62:[1,168]},{18:[1,169]},{24:170,26:$V5,27:$V6,28:$V7,29:$V8},{18:[1,171]},{15:[2,15]},{21:[1,172]},{43:[1,173]},{18:[1,174]},{15:[2,29]},{21:[1,175]},{68:[1,176]},{18:[1,177]},{15:[1,180],56:178,57:179},{15:[1,181]},{15:[2,16]},{44:[1,182]},{18:[1,183]},{15:[2,30]},{49:[1,184]},{18:[1,185]},{15:[1,188],63:186,64:187},{15:[1,189],57:190},{15:[2,41]},{16:$Vc},{21:[1,192]},{18:[1,193]},{15:[2,31]},{18:[1,194]},{24:195,26:$V5,27:$V6,28:$V7,29:$V8},{15:[1,196],64:197},{15:[2,49]},{16:$Vd},{16:$Vc,21:[1,199]},{15:[2,40]},{58:[1,200]},{54:[1,201]},{15:[2,32]},{15:[2,37]},{15:[1,202]},{16:$Vd,21:[1,203]},{15:[2,48]},{43:[1,204]},{55:[1,205]},{18:[1,206]},{18:[1,207]},{21:[1,208]},{62:[1,209]},{18:[1,210]},{18:[1,211]},{15:$Vb,24:213,26:$V5,27:$V6,28:$V7,29:$V8,50:212},{15:[2,38]},{68:[1,214]},{18:[1,215]},{15:$Vb,24:217,26:$V5,27:$V6,28:$V7,29:$V8,50:216},{15:[2,39]},{15:[1,220],59:218,60:219},{15:[1,221]},{18:[1,222]},{15:[2,47]},{15:[1,225],65:223,66:224},{15:[1,226]},{15:[1,227],60:228},{15:[2,45]},{16:$Ve},{21:[1,230]},{15:[2,55]},{15:[1,231],66:232},{15:[2,53]},{16:$Vf},{21:[1,234]},{16:$Ve,21:[1,235]},{15:[2,44]},{61:[1,236]},{58:[1,237]},{16:$Vf,21:[1,238]},{15:[2,52]},{67:[1,239]},{43:[1,240]},{58:[1,241]},{18:[1,242]},{18:[1,243]},{43:[1,244]},{18:[1,245]},{18:[1,246]},{18:[1,247]},{24:248,26:$V5,27:$V6,28:$V7,29:$V8},{15:[2,43]},{18:[1,249]},{24:250,26:$V5,27:$V6,28:$V7,29:$V8},{15:[2,51]},{15:[2,42]},{15:[1,251]},{15:[2,50]},{15:[1,252]},{21:[1,253]},{21:[1,254]},{61:[1,255]},{67:[1,256]},{18:[1,257]},{18:[1,258]},{15:[2,46]},{15:[2,54]}],
defaultActions: {14:[2,1],41:[2,17],42:[2,18],43:[2,19],44:[2,20],50:[2,36],69:[2,35],75:[2,21],76:[2,22],161:[2,15],165:[2,29],171:[2,16],174:[2,30],179:[2,41],183:[2,31],187:[2,49],190:[2,40],193:[2,32],194:[2,37],197:[2,48],207:[2,38],211:[2,39],215:[2,47],219:[2,45],222:[2,55],224:[2,53],228:[2,44],232:[2,52],243:[2,43],246:[2,51],247:[2,42],249:[2,50],257:[2,46],258:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:// se ignoran espacios en blanco
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 17;
break;
case 4:return 30;
break;
case 5:return 31;
break;
case 6:return 32;
break;
case 7:return 23
break;
case 8:return 25;
break;
case 9:return 33;
break;
case 10:return 34;
break;
case 11:return 35;
break;
case 12:return 36;
break;
case 13:return 41;
break;
case 14:return 42;
break;
case 15:return 43;
break;
case 16:return 44;
break;
case 17:return 45;
break;
case 18:return 46;
break;
case 19:return 49;
break;
case 20:return 54;
break;
case 21:return 55;
break;
case 22:return 58;
break;
case 23:return 61;
break;
case 24:return 62;
break;
case 25:return 43;
break;
case 26:return 67;
break;
case 27:return 68;
break;
case 28:return 15;
break;
case 29:return 18;
break;
case 30:return 16;
break;
case 31:return 21;
break;
case 32: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2); return 26; 
break;
case 33:return 29;
break;
case 34:return 28;
break;
case 35:return 27;
break;
case 36:return 5;
break;
case 37: console.error('Este es un error léxico: ' + yy_.yytext + ', en la linea: ' + yy_.yylloc.first_line + ', en la columna: ' + yy_.yylloc.first_column); 
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:LOGIN\b)/i,/^(?:SUCCESS\b)/i,/^(?:FAIL\b)/i,/^(?:LOGOUT\b)/i,/^(?:USER\b)/i,/^(?:PASS\b)/i,/^(?:QUERY\b)/i,/^(?:DATA\b)/i,/^(?:MESSAGE\b)/i,/^(?:ERROR\b)/i,/^(?:LINE\b)/i,/^(?:COLUMN\b)/i,/^(?:TYPE\b)/i,/^(?:DESC\b)/i,/^(?:STRUC\b)/i,/^(?:DATABASES\b)/i,/^(?:DATABASE\b)/i,/^(?:NAME\b)/i,/^(?:TABLES\b)/i,/^(?:TABLE\b)/i,/^(?:COLUMNS\b)/i,/^(?:TYPES\b)/i,/^(?:TYPE\b)/i,/^(?:ATTRIBUTES\b)/i,/^(?:PROCEDURES\b)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\+)/i,/^(?:-)/i,/^(?:"[^\"]*")/i,/^(?:[0-9]+(\.[0-9]+)?\b)/i,/^(?:[0-9]+\b)/i,/^(?:([a-zA-Z])[a-zA-Z0-9_]*)/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}